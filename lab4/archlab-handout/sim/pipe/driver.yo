                            | #######################################################################
                            | # Test for copying block of size 64;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4c008000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f24000000000000000 | 	irmovq $64, %rdx		# src and dst have 64 elements
0x014: 30f63806000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f72804000000000000 | 	irmovq src, %rdi	# src array
0x028: 803b00000000000000   | 	call ncopy		 
0x031: 80bb02000000000000   | 	call check	        # Call checker code
0x03a: 00                   | 	halt                    # should halt with 0xaaaa in %rax
0x03b:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x03b:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            |     # Loop header
0x03b: 6300                 |     xorq %rax,%rax
0x03d: 6222                 |     andq %rdx,%rdx      
0x03f: 705201000000000000   |     jmp test
0x048:                      | Loop:                # 六路展开
0x048: 50870000000000000000 |     mrmovq (%rdi),%r8
0x052: 40860000000000000000 |     rmmovq %r8,(%rsi)
0x05c: 6288                 |     andq %r8,%r8
0x05e: 717100000000000000   |     jle Loop1
0x067: c0f00100000000000000 |     iaddq $1,%rax
0x071:                      | Loop1:
0x071: 50870800000000000000 |     mrmovq 8(%rdi),%r8
0x07b: 40860800000000000000 |     rmmovq %r8,8(%rsi)
0x085: 6288                 |     andq %r8,%r8
0x087: 719a00000000000000   |     jle Loop2
0x090: c0f00100000000000000 |     iaddq $1,%rax
0x09a:                      | Loop2:
0x09a: 50871000000000000000 |     mrmovq 16(%rdi),%r8
0x0a4: 40861000000000000000 |     rmmovq %r8,16(%rsi)
0x0ae: 6288                 |     andq %r8,%r8
0x0b0: 71c300000000000000   |     jle Loop3
0x0b9: c0f00100000000000000 |     iaddq $1,%rax
0x0c3:                      | Loop3:
0x0c3: 50871800000000000000 |     mrmovq 24(%rdi),%r8
0x0cd: 40861800000000000000 |     rmmovq %r8,24(%rsi)
0x0d7: 6288                 |     andq %r8,%r8
0x0d9: 71ec00000000000000   |     jle Loop4
0x0e2: c0f00100000000000000 |     iaddq $1,%rax
0x0ec:                      | Loop4:
0x0ec: 50872000000000000000 |     mrmovq 32(%rdi),%r8
0x0f6: 40862000000000000000 |     rmmovq %r8,32(%rsi)
0x100: 6288                 |     andq %r8,%r8
0x102: 711501000000000000   |     jle Loop5
0x10b: c0f00100000000000000 |     iaddq $1,%rax
0x115:                      | Loop5:
0x115: 50872800000000000000 |     mrmovq 40(%rdi),%r8
0x11f: 40862800000000000000 |     rmmovq %r8,40(%rsi)
0x129: c0f73000000000000000 |     iaddq $48,%rdi
0x133: c0f63000000000000000 |     iaddq $48,%rsi
0x13d: 6288                 |     andq %r8,%r8
0x13f: 715201000000000000   |     jle test
0x148: c0f00100000000000000 |     iaddq $1,%rax   
0x152:                      | test:
0x152: c0f2faffffffffffffff |     iaddq $-6, %rdx         
0x15c: 754800000000000000   |     jge Loop                
0x165: c0f20600000000000000 |     iaddq $6, %rdx
0x16f: 700702000000000000   |     jmp test2               
                            | 
0x178:                      | L:
0x178: 50870000000000000000 |     mrmovq (%rdi),%r8
0x182: 6288                 |     andq %r8,%r8
0x184: 40860000000000000000 |     rmmovq %r8,(%rsi)
0x18e: 71a101000000000000   |     jle L1
0x197: c0f00100000000000000 |     iaddq $1,%rax
0x1a1:                      | L1:
0x1a1: 50870800000000000000 |     mrmovq 8(%rdi),%r8
0x1ab: 6288                 |     andq %r8,%r8
0x1ad: 40860800000000000000 |     rmmovq %r8,8(%rsi)
0x1b7: 71ca01000000000000   |     jle L2
0x1c0: c0f00100000000000000 |     iaddq $1,%rax
0x1ca:                      | L2:
0x1ca: 50871000000000000000 |     mrmovq 16(%rdi),%r8
0x1d4: c0f71800000000000000 |     iaddq $24,%rdi
0x1de: 40861000000000000000 |     rmmovq %r8,16(%rsi)
0x1e8: c0f61800000000000000 |     iaddq $24,%rsi
0x1f2: 6288                 |     andq %r8,%r8
0x1f4: 710702000000000000   |     jle test2
0x1fd: c0f00100000000000000 |     iaddq $1,%rax
0x207:                      | test2:
0x207: c0f2fdffffffffffffff |     iaddq $-3, %rdx         # 三路
0x211: 757801000000000000   |     jge L
0x21a: c0f20200000000000000 |     iaddq $2, %rdx          
0x224: 739102000000000000   |     je R0
0x22d: 72ba02000000000000   |     jl Done
0x236: 50870000000000000000 |     mrmovq (%rdi),%r8
0x240: 50970800000000000000 |     mrmovq 8(%rdi),%r9
0x24a: 40860000000000000000 |     rmmovq %r8,(%rsi)
0x254: 40960800000000000000 |     rmmovq %r9,8(%rsi)
0x25e: 6288                 |     andq %r8,%r8
0x260: 717302000000000000   |     jle R2
0x269: c0f00100000000000000 |     iaddq $1,%rax
0x273:                      | R2:
0x273: 6299                 |     andq %r9,%r9
0x275: 71ba02000000000000   |     jle Done
0x27e: c0f00100000000000000 |     iaddq $1,%rax
0x288: 70ba02000000000000   |     jmp Done
0x291:                      | R0:
0x291: 50870000000000000000 |     mrmovq (%rdi),%r8
0x29b: 6288                 |     andq %r8,%r8
0x29d: 40860000000000000000 |     rmmovq %r8,(%rsi)
0x2a7: 71ba02000000000000   |     jle Done
0x2b0: c0f00100000000000000 |     iaddq $1,%rax
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x2ba:                      | Done:
0x2ba: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x2bb:                      | End:
                            | #/* $end ncopy-ys */
0x2bb:                      | EndFun:
                            | #################################################################### 
                            | # Epilogue code for the correctness testing driver
                            | ####################################################################
                            | 
                            | # This is the correctness checking code.
                            | # It checks:
                            | #   1. %rax has 29.  Set %rax to 0xbbbb if not.
                            | #   2. The total length of the code is less than or equal to 1000.
                            | #      Set %rax to 0xcccc if not.
                            | #   3. The source data was copied to the destination.
                            | #      Set %rax to 0xdddd if not.
                            | #   4. The words just before and just after the destination region
                            | #      were not corrupted.  Set %rax to 0xeeee if not.
                            | # If all checks pass, then sets %rax to 0xaaaa
0x2bb:                      | check:
                            | 	# Return value test
0x2bb: 30fa1d00000000000000 | 	irmovq $29,%r10
0x2c5: 61a0                 | 	subq %r10,%rax
0x2c7: 73e302000000000000   | 	je checkb
0x2d0: 30f0bbbb000000000000 | 	irmovq $0xbbbb,%rax  # Failed test #1
0x2da: 702104000000000000   | 	jmp cdone
0x2e3:                      | checkb:
                            | 	# Code length check
0x2e3: 30f0bb02000000000000 | 	irmovq EndFun,%rax
0x2ed: 30f23b00000000000000 | 	irmovq StartFun,%rdx
0x2f7: 6120                 | 	subq %rdx,%rax
0x2f9: 30f2e803000000000000 | 	irmovq $1000,%rdx
0x303: 6102                 | 	subq %rax,%rdx
0x305: 752103000000000000   | 	jge checkm
0x30e: 30f0cccc000000000000 | 	irmovq $0xcccc,%rax  # Failed test #2
0x318: 702104000000000000   | 	jmp cdone
0x321:                      | checkm:
0x321: 30f23806000000000000 | 	irmovq dest, %rdx # Pointer to next destination location
0x32b: 30f32804000000000000 | 	irmovq src,%rbx   # Pointer to next source location
0x335: 30f74000000000000000 | 	irmovq $64,%rdi  # Count
0x33f: 6277                 | 	andq %rdi,%rdi
0x341: 739f03000000000000   | 	je checkpre         # Skip check if count = 0
0x34a:                      | mcloop:
0x34a: 50020000000000000000 | 	mrmovq (%rdx),%rax
0x354: 50630000000000000000 | 	mrmovq (%rbx),%rsi
0x35e: 6160                 | 	subq %rsi,%rax
0x360: 737c03000000000000   | 	je  mok
0x369: 30f0dddd000000000000 | 	irmovq $0xdddd,%rax # Failed test #3
0x373: 702104000000000000   | 	jmp cdone
0x37c:                      | mok:
0x37c: 30f00800000000000000 | 	irmovq $8,%rax
0x386: 6002                 | 	addq %rax,%rdx	  # dest ++
0x388: 6003                 | 	addq %rax,%rbx    # src++
0x38a: 30f00100000000000000 | 	irmovq $1,%rax
0x394: 6107                 | 	subq %rax,%rdi    # cnt--
0x396: 764a03000000000000   | 	jg mcloop
0x39f:                      | checkpre:
                            | 	# Check for corruption
0x39f: 30f23006000000000000 | 	irmovq Predest,%rdx
0x3a9: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word before destination
0x3b3: 30f2fadebc0000000000 | 	irmovq $0xbcdefa, %rdx
0x3bd: 6120                 | 	subq %rdx,%rax
0x3bf: 73db03000000000000   | 	je checkpost
0x3c8: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax  # Failed test #4
0x3d2: 702104000000000000   | 	jmp cdone
0x3db:                      | checkpost:
                            | 	# Check for corruption
0x3db: 30f23808000000000000 | 	irmovq Postdest,%rdx
0x3e5: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word after destination
0x3ef: 30f2bcfade0000000000 | 	irmovq $0xdefabc, %rdx
0x3f9: 6120                 | 	subq %rdx,%rax
0x3fb: 731704000000000000   | 	je checkok
0x404: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax # Failed test #4
0x40e: 702104000000000000   | 	jmp cdone
0x417:                      | checkok:
                            | 	# Successful checks
0x417: 30f0aaaa000000000000 | 	irmovq $0xaaaa,%rax
0x421:                      | cdone:
0x421: 90                   | 	ret
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x428:                      | 	.align 8
0x428:                      | src:
0x428: ffffffffffffffff     | 	.quad -1
0x430: feffffffffffffff     | 	.quad -2
0x438: fdffffffffffffff     | 	.quad -3
0x440: fcffffffffffffff     | 	.quad -4
0x448: fbffffffffffffff     | 	.quad -5
0x450: 0600000000000000     | 	.quad 6
0x458: f9ffffffffffffff     | 	.quad -7
0x460: f8ffffffffffffff     | 	.quad -8
0x468: f7ffffffffffffff     | 	.quad -9
0x470: 0a00000000000000     | 	.quad 10
0x478: 0b00000000000000     | 	.quad 11
0x480: 0c00000000000000     | 	.quad 12
0x488: f3ffffffffffffff     | 	.quad -13
0x490: f2ffffffffffffff     | 	.quad -14
0x498: 0f00000000000000     | 	.quad 15
0x4a0: 1000000000000000     | 	.quad 16
0x4a8: 1100000000000000     | 	.quad 17
0x4b0: eeffffffffffffff     | 	.quad -18
0x4b8: edffffffffffffff     | 	.quad -19
0x4c0: ecffffffffffffff     | 	.quad -20
0x4c8: ebffffffffffffff     | 	.quad -21
0x4d0: 1600000000000000     | 	.quad 22
0x4d8: 1700000000000000     | 	.quad 23
0x4e0: 1800000000000000     | 	.quad 24
0x4e8: e7ffffffffffffff     | 	.quad -25
0x4f0: e6ffffffffffffff     | 	.quad -26
0x4f8: e5ffffffffffffff     | 	.quad -27
0x500: 1c00000000000000     | 	.quad 28
0x508: 1d00000000000000     | 	.quad 29
0x510: 1e00000000000000     | 	.quad 30
0x518: 1f00000000000000     | 	.quad 31
0x520: e0ffffffffffffff     | 	.quad -32
0x528: dfffffffffffffff     | 	.quad -33
0x530: 2200000000000000     | 	.quad 34
0x538: ddffffffffffffff     | 	.quad -35
0x540: dcffffffffffffff     | 	.quad -36
0x548: 2500000000000000     | 	.quad 37
0x550: 2600000000000000     | 	.quad 38
0x558: d9ffffffffffffff     | 	.quad -39
0x560: 2800000000000000     | 	.quad 40
0x568: d7ffffffffffffff     | 	.quad -41
0x570: 2a00000000000000     | 	.quad 42
0x578: 2b00000000000000     | 	.quad 43
0x580: d4ffffffffffffff     | 	.quad -44
0x588: d3ffffffffffffff     | 	.quad -45
0x590: 2e00000000000000     | 	.quad 46
0x598: 2f00000000000000     | 	.quad 47
0x5a0: d0ffffffffffffff     | 	.quad -48
0x5a8: cfffffffffffffff     | 	.quad -49
0x5b0: 3200000000000000     | 	.quad 50
0x5b8: cdffffffffffffff     | 	.quad -51
0x5c0: ccffffffffffffff     | 	.quad -52
0x5c8: 3500000000000000     | 	.quad 53
0x5d0: 3600000000000000     | 	.quad 54
0x5d8: 3700000000000000     | 	.quad 55
0x5e0: c8ffffffffffffff     | 	.quad -56
0x5e8: c7ffffffffffffff     | 	.quad -57
0x5f0: 3a00000000000000     | 	.quad 58
0x5f8: 3b00000000000000     | 	.quad 59
0x600: c4ffffffffffffff     | 	.quad -60
0x608: c3ffffffffffffff     | 	.quad -61
0x610: c2ffffffffffffff     | 	.quad -62
0x618: 3f00000000000000     | 	.quad 63
0x620: c0ffffffffffffff     | 	.quad -64
0x628: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x630:                      | 	.align 16
0x630:                      | Predest:
0x630: fadebc0000000000     | 	.quad 0xbcdefa
0x638:                      | dest:
0x638: abefcd0000000000     | 	.quad 0xcdefab
0x640: abefcd0000000000     | 	.quad 0xcdefab
0x648: abefcd0000000000     | 	.quad 0xcdefab
0x650: abefcd0000000000     | 	.quad 0xcdefab
0x658: abefcd0000000000     | 	.quad 0xcdefab
0x660: abefcd0000000000     | 	.quad 0xcdefab
0x668: abefcd0000000000     | 	.quad 0xcdefab
0x670: abefcd0000000000     | 	.quad 0xcdefab
0x678: abefcd0000000000     | 	.quad 0xcdefab
0x680: abefcd0000000000     | 	.quad 0xcdefab
0x688: abefcd0000000000     | 	.quad 0xcdefab
0x690: abefcd0000000000     | 	.quad 0xcdefab
0x698: abefcd0000000000     | 	.quad 0xcdefab
0x6a0: abefcd0000000000     | 	.quad 0xcdefab
0x6a8: abefcd0000000000     | 	.quad 0xcdefab
0x6b0: abefcd0000000000     | 	.quad 0xcdefab
0x6b8: abefcd0000000000     | 	.quad 0xcdefab
0x6c0: abefcd0000000000     | 	.quad 0xcdefab
0x6c8: abefcd0000000000     | 	.quad 0xcdefab
0x6d0: abefcd0000000000     | 	.quad 0xcdefab
0x6d8: abefcd0000000000     | 	.quad 0xcdefab
0x6e0: abefcd0000000000     | 	.quad 0xcdefab
0x6e8: abefcd0000000000     | 	.quad 0xcdefab
0x6f0: abefcd0000000000     | 	.quad 0xcdefab
0x6f8: abefcd0000000000     | 	.quad 0xcdefab
0x700: abefcd0000000000     | 	.quad 0xcdefab
0x708: abefcd0000000000     | 	.quad 0xcdefab
0x710: abefcd0000000000     | 	.quad 0xcdefab
0x718: abefcd0000000000     | 	.quad 0xcdefab
0x720: abefcd0000000000     | 	.quad 0xcdefab
0x728: abefcd0000000000     | 	.quad 0xcdefab
0x730: abefcd0000000000     | 	.quad 0xcdefab
0x738: abefcd0000000000     | 	.quad 0xcdefab
0x740: abefcd0000000000     | 	.quad 0xcdefab
0x748: abefcd0000000000     | 	.quad 0xcdefab
0x750: abefcd0000000000     | 	.quad 0xcdefab
0x758: abefcd0000000000     | 	.quad 0xcdefab
0x760: abefcd0000000000     | 	.quad 0xcdefab
0x768: abefcd0000000000     | 	.quad 0xcdefab
0x770: abefcd0000000000     | 	.quad 0xcdefab
0x778: abefcd0000000000     | 	.quad 0xcdefab
0x780: abefcd0000000000     | 	.quad 0xcdefab
0x788: abefcd0000000000     | 	.quad 0xcdefab
0x790: abefcd0000000000     | 	.quad 0xcdefab
0x798: abefcd0000000000     | 	.quad 0xcdefab
0x7a0: abefcd0000000000     | 	.quad 0xcdefab
0x7a8: abefcd0000000000     | 	.quad 0xcdefab
0x7b0: abefcd0000000000     | 	.quad 0xcdefab
0x7b8: abefcd0000000000     | 	.quad 0xcdefab
0x7c0: abefcd0000000000     | 	.quad 0xcdefab
0x7c8: abefcd0000000000     | 	.quad 0xcdefab
0x7d0: abefcd0000000000     | 	.quad 0xcdefab
0x7d8: abefcd0000000000     | 	.quad 0xcdefab
0x7e0: abefcd0000000000     | 	.quad 0xcdefab
0x7e8: abefcd0000000000     | 	.quad 0xcdefab
0x7f0: abefcd0000000000     | 	.quad 0xcdefab
0x7f8: abefcd0000000000     | 	.quad 0xcdefab
0x800: abefcd0000000000     | 	.quad 0xcdefab
0x808: abefcd0000000000     | 	.quad 0xcdefab
0x810: abefcd0000000000     | 	.quad 0xcdefab
0x818: abefcd0000000000     | 	.quad 0xcdefab
0x820: abefcd0000000000     | 	.quad 0xcdefab
0x828: abefcd0000000000     | 	.quad 0xcdefab
0x830: abefcd0000000000     | 	.quad 0xcdefab
0x838:                      | Postdest:
0x838: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x840:                      | .align 8
                            | # Run time stack
0x840: 0000000000000000     | 	.quad 0
0x848: 0000000000000000     | 	.quad 0
0x850: 0000000000000000     | 	.quad 0
0x858: 0000000000000000     | 	.quad 0
0x860: 0000000000000000     | 	.quad 0
0x868: 0000000000000000     | 	.quad 0
0x870: 0000000000000000     | 	.quad 0
0x878: 0000000000000000     | 	.quad 0
0x880: 0000000000000000     | 	.quad 0
0x888: 0000000000000000     | 	.quad 0
0x890: 0000000000000000     | 	.quad 0
0x898: 0000000000000000     | 	.quad 0
0x8a0: 0000000000000000     | 	.quad 0
0x8a8: 0000000000000000     | 	.quad 0
0x8b0: 0000000000000000     | 	.quad 0
0x8b8: 0000000000000000     | 	.quad 0
                            | 
0x8c0:                      | Stack:
